# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet hookw "HookWidget" b
class $1 extends HookWidget {
	const $1({
		super.key,
	});

	@override
	Widget build(BuildContext context) {
		throw UnimplementedError();
	}
}
endsnippet

snippet stl "StatelessWidget" b
class $1 extends StatelessWidget {
	const $1({
		super.key,
	});

	@override
	Widget build(BuildContext context) {
		throw UnimplementedError();
	}
}
endsnippet

snippet hookc "HookConsumerWidget" b
class $1 extends HookConsumerWidget {
	const $1({
		super.key,
	});

	@override
	Widget build(BuildContext context, WidgetRef ref) {
		throw UnimplementedError();
	}
}

endsnippet
snippet freezed "Freezed" b
@freezed
class $1 with _\$$1 {
	factory $1($2) = _$1;
}
endsnippet

snippet jsonf "fromJson" b
factory $1.fromJson(Map<String, dynamic> json) => _\$$1FromJson(json);
endsnippet

snippet jsont "toJson" b
Map<String, dynamic> toJson() => _\$$1ToJson(this);
endsnippet
